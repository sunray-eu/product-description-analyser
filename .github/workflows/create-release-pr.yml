name: Create Release PR
on:
  workflow_dispatch:
    inputs:
      semver:
        description: 'New Version(semver)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
permissions:
  contents: write
  pull-requests: write
  packages: read

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update Version
        run: npm run ci:versionup:${SEMVER}
        env:
          SEMVER: ${{ github.event.inputs.semver }}
          # GIT_AUTHOR_NAME: ${{ github.actor }}
          # GIT_AUTHOR_EMAIL: ${{ github.actor }}@users.noreply.github.com

      - name: Set PACKAGE_VERSION
        run: echo "PACKAGE_VERSION=$(cat composer.json | jq -r .version)" >> $GITHUB_ENV

      - name: Set GitHub Release Note
        id: release_note
        uses: actions/github-script@v7
        with:
          script: |
            const result = await exec.getExecOutput(`gh api "/repos/{owner}/{repo}/releases/generate-notes" -f tag_name="v${process.env.PACKAGE_VERSION}" --jq .body`, [], {
              ignoreReturnCode: true,
            })
            core.setOutput('stdout', result.stdout)
        env:
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): v${{ env.PACKAGE_VERSION }}"
          committer: GitHub <noreply@github.com>
          # Set by default in action
          # author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          assignees: ${{ github.actor }}
          signoff: true
          branch: release/${{ env.PACKAGE_VERSION }}
          branch-suffix: timestamp
          delete-branch: true
          title: 'v${{ env.PACKAGE_VERSION }}'
          body: |
            ${{ steps.release_note.outputs.stdout }}
          labels: "Type: Release"

      - name: Check Pull Request
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
